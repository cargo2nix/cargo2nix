use std::{env::current_dir, fs::File};

use cargo2nix::{
    ast::{FmtWriter, Generate, IoWriter, Write},
    codegen::{generate, generate_builder},
    metadata::generate_lockfile,
    resolve::resolve,
};

use cargo::{core::Workspace, util::config::Config};
use failure::Error;
use structopt::StructOpt;
use tokio::runtime::Runtime;

#[derive(StructOpt)]
#[structopt(
    name = "cargo2nix",
    author = "Ding Xiang Fei <dingxiangfei2009@gmail.com>",
    about = "Nixify your Cargo workspace by generating Nix version pins and Nix expression stub"
)]
enum App {
    #[structopt(name = "gen")]
    Generate {
        #[structopt(short = "p", default_value = "deps.nix")]
        pin: String,
        #[structopt(short = "s", default_value = "crate.nix")]
        stub: String,
    },
    #[structopt(name = "resolve")]
    Resolve,
}

fn main() -> Result<(), Error> {
    env_logger::init();

    match App::from_args() {
        App::Generate { pin, stub } => {
            let cfg = Config::default()?;
            let cwd = current_dir()?;
            let ws = Workspace::new(&cwd.join("Cargo.toml"), &cfg)?;

            let mut runtime = Runtime::new()?;
            let (packages, roots) = generate_lockfile(&cfg, &ws)?;
            let expr = runtime.block_on(generate(packages))?;

            let comment = format!("# Generated by cargo2nix {}\n", env!("CARGO_PKG_VERSION"));
            if pin == "-" {
                let mut writer = FmtWriter::new(comment.clone());
                expr.generate_word(&mut writer)?;
                println!("{}", writer.into_inner())
            } else {
                let mut writer = IoWriter::new(File::create(pin)?);
                writer.write_str(&comment)?;
                expr.generate_word(&mut writer)?;
            }

            let expr = generate_builder(roots);
            if stub == "-" {
                let mut writer = FmtWriter::new(comment);
                expr.generate_word(&mut writer)?;
                println!("{}", writer.into_inner())
            } else {
                let mut writer = IoWriter::new(File::create(stub)?);
                writer.write_str(&comment)?;
                expr.generate_word(&mut writer)?;
            }
        }
        App::Resolve => {
            let mut input = String::new();
            {
                use std::io::Read;

                let stdin = std::io::stdin();
                let mut stdin = stdin.lock();
                stdin.read_to_string(&mut input)?;
            }
            let request = serde_json::from_str(&input)?;
            let response = resolve(request)?;
            {
                use std::io::Write;

                let stdout = std::io::stdout();
                let mut stdout = stdout.lock();
                stdout.write_all(serde_json::to_string(&response)?.as_bytes())?;
            }
        }
    }
    Ok(())
}
