# This file was @generated by cargo2nix {{ cargo2nix_version }}.
# It is not intended to be manually edited.

args@{
  release ? true,
  rootFeatures ? [
  {%- for feature in root_features %}
    "{{ feature }}"
  {%- endfor %}
  ],
  rustPackages,
  buildRustPackages,
  hostPlatform,
  hostPlatformCpu ? null,
  hostPlatformFeatures ? [],
  target ? null,
  codegenOpts ? null,
  profileOpts ? null,
  cargoUnstableFlags ? null,
  rustcLinkFlags ? null,
  rustcBuildFlags ? null,
  mkRustCrate,
  rustLib,
  lib,
  workspaceSrc,
  ignoreLockHash,
}:
let
  nixifiedLockHash = "{{ cargo_lock_hash }}";
  workspaceSrc = if args.workspaceSrc == null then ./. else args.workspaceSrc;
  currentLockHash = builtins.hashFile "sha256" (workspaceSrc + /Cargo.lock);
  lockHashIgnored = if ignoreLockHash
                  then builtins.trace "Ignoring lock hash" ignoreLockHash
                  else ignoreLockHash;
in if !lockHashIgnored && (nixifiedLockHash != currentLockHash) then
  throw ("Cargo.nix ${nixifiedLockHash} is out of sync with Cargo.lock ${currentLockHash}")
else let
  inherit (rustLib) fetchCratesIo fetchCrateLocal fetchCrateGit fetchCrateAlternativeRegistry expandFeatures decideProfile genDrvsByProfile;
  profilesByName = {
  {%- for name, profile in profiles %}
    {{ name }} = builtins.fromTOML "{{ profile }}";
  {%- endfor %}
  };
  rootFeatures' = expandFeatures rootFeatures;
  overridableMkRustCrate = f:
    let
      drvs = genDrvsByProfile profilesByName ({ profile, profileName }: mkRustCrate ({ inherit release profile hostPlatformCpu hostPlatformFeatures target profileOpts codegenOpts cargoUnstableFlags rustcLinkFlags rustcBuildFlags; } // (f profileName)));
    in { compileMode ? null, profileName ? decideProfile compileMode release }:
      let drv = drvs.${profileName}; in if compileMode == null then drv else drv.override { inherit compileMode; };
in
{
  cargo2nixVersion = "{{ cargo2nix_version }}";
  workspace = {
  {%- for crate in workspace_members %}
    {{ crate.name }} = rustPackages.unknown.{{ crate.name }}."{{ crate.version }}";
  {%- endfor %}
  };

  {%- for crate in crates %}
  "{{ crate.registry }}".{{ crate.name }}."{{ crate.version }}" = overridableMkRustCrate (profileName: rec {
    name = "{{ crate.name }}";
    version = "{{ crate.version }}";
    registry = "{{ crate.registry }}";

    {%- if crate.source.CratesIo.sha256 %}
    src = fetchCratesIo { inherit name version; sha256 = "{{ crate.source.CratesIo.sha256 }}"; };
    {%- elif crate.source.Git.url %}
    src = fetchCrateGit {
      url = "{{ crate.source.Git.url }}";
      name = "{{ crate.name }}";
      version = "{{ crate.version }}";
      rev = "{{ crate.source.Git.rev }}";
      {%- if crate.source.Git.branch %}
      ref = "{{ crate.source.Git.branch }}";
      {%- endif -%}
    };
    {%- elif crate.source.Local.path %}
    {%- if crate.source.Local.path == "." %}
    src = fetchCrateLocal workspaceSrc;
    {%- else %}
    src = fetchCrateLocal (workspaceSrc + "/{{ crate.source.Local.path }}");
    {%- endif %}
    {%- elif crate.source.Registry.index %}
    src = fetchCrateAlternativeRegistry {
      index = {{ crate.source.Registry.index }};
      name = "{{ crate.name }}";
      version = "{{ crate.version }}";
      sha256 = "{{ crate.source.Registry.sha256 }}";
    };
    {%- else %}
    # ERROR: Could not resolve source: {{ crate.source | safe | json_encode() }}
    {% endif -%}

    {%- if crate.features | length > 0 %}
    features = builtins.concatLists [
    {%- for feature in crate.features %}
      {%- if feature.activated_by %}
      (lib.optional ({{ feature.activated_by }}) "{{ feature.name }}")
      {%- else %}
      [ "{{ feature.name }}" ]
      {%- endif %}
    {%- endfor %}
    ];
    {%- endif %}

    {%- if crate.dependencies | length > 0 %}
    dependencies = {
    {%- for dep in crate.dependencies %}
      {%- if dep.is_proc_macro -%}
        {%- set package_set = 'buildRustPackages' -%}
        {%- set profile = '{ profileName = "__noProfile"; }' -%}
      {%- else -%}
        {%- set package_set = 'rustPackages' -%}
        {%- set profile = '{ inherit profileName; }' -%}
      {%- endif -%}
      {%- if dep.cfg_condition %}
        {%- set attribute = '${ if ' ~ dep.cfg_condition ~ ' then "' ~ dep.extern_name ~ '" else null }' -%}
      {%- else %}
        {%- set attribute = dep.extern_name -%}
      {%- endif %}
      {{ attribute }} = ({{ package_set }}."{{ dep.registry }}".{{ dep.name }}."{{ dep.version }}" {{ profile }}).out;
    {%- endfor %}
    };
    {%- endif %}

    {%- if crate.dev_dependencies | length > 0 %}
    devDependencies = {
    {%- for dep in crate.dev_dependencies %}
      {%- if dep.is_proc_macro -%}
        {%- set package_set = 'buildRustPackages' -%}
        {%- set profile = '{ profileName = "__noProfile"; }' -%}
      {%- else -%}
        {%- set package_set = 'rustPackages' -%}
        {%- set profile = '{ inherit profileName; }' -%}
      {%- endif -%}
      {%- if dep.cfg_condition %}
        {%- set attribute = '${ if ' ~ dep.cfg_condition ~ ' then "' ~ dep.extern_name ~ '" else null }' -%}
      {%- else %}
        {%- set attribute = dep.extern_name -%}
      {%- endif %}
      {{ attribute }} = ({{ package_set }}."{{ dep.registry }}".{{ dep.name }}."{{ dep.version }}" {{ profile }}).out;
    {%- endfor %}
    };
    {%- endif %}

    {%- if crate.build_dependencies | length > 0 %}
    buildDependencies = {
    {%- for dep in crate.build_dependencies %}
      {%- if dep.cfg_condition %}
        {%- set attribute = '${ if ' ~ dep.cfg_condition ~ ' then "' ~ dep.extern_name ~ '" else null }' -%}
      {%- else %}
        {%- set attribute = dep.extern_name -%}
      {%- endif %}
      {{ attribute }} = (buildRustPackages."{{ dep.registry }}".{{ dep.name }}."{{ dep.version }}" { profileName = "__noProfile"; }).out;
    {%- endfor %}
    };
    {%- endif %}
  });
  {% endfor %}
}
